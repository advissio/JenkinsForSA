<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>30 8-18 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>/var/jenkins_home/workspace</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>curl ${URL_APPLICAZIONI} -o /var/jenkins_home/workspace/ApplicazioniDaAnalizzare.json</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.plugins.groovy.SystemGroovy plugin="groovy@2.3">
      <source class="hudson.plugins.groovy.StringSystemScriptSource">
        <script plugin="script-security@1.75">
          <script>import groovy.json.JsonSlurper
import jenkins.model.*
import hudson.model.*

def SOLO_APP=build.getEnvironment(listener).get( &apos;SOLO_APP&apos; ) 
 
def JI=new File(&quot;/var/jenkins_home/workspace/ApplicazioniDaAnalizzare.json&quot;)
def CO=new File(&apos;/var/jenkins_home/workspace/ApplicazioniDaAnalizzare.csv&apos;)

record=&quot;idApplicazione,descrizioneApp,provider,areaApplicativa,contestoApplicativo,referenteApplicativo,emailReferenteApplicativo,idTecnologia,tipoRepository,ultimoTagoTrunk,pathSorgente,descrizione,dettagliTecnologici&quot;
CO.write(record+&quot;\n&quot;)

def CS=new File(&apos;/var/jenkins_home/workspace/ApplicazioniDaAnalizzare.listaAppSospese&apos;)
def CL=new File(&apos;/var/jenkins_home/workspace/ApplicazioniDaAnalizzare.listaApp&apos;)
def CLI=new File(&apos;/var/jenkins_home/workspace/ApplicazioniDaAnalizzare.listaAppId&apos;)

def CSesiste=&quot;N&quot;
if ( CS.exists() )
{
  CSesiste=&quot;S&quot;
}

CL.write(&quot;&quot;)
CLI.write(&quot;&quot;)
def listaApp=&quot;sceltaApp=Tutte le App&quot;
def lastListaApp=&quot;&quot;
def listaAppId=&quot;sceltaAppId=&quot;

def jsonSlurper = new JsonSlurper()

def result=JI.getText(&apos;UTF-8&apos;)

apps=jsonSlurper.parseText(result)

def idApplicazione=&quot;&quot;
def descrizioneApp=&quot;&quot;
def provider=&quot;&quot;
def areaApplicativa=&quot;&quot;
def contestoApplicativo=&quot;&quot;
def componentiApplicativi=&quot;&quot;
def referenteApplicativo=&quot;&quot;
def emailReferenteApplicativo=&quot;&quot;

apps.each() { record -&gt;
  
  idApplicazione=&quot;&quot;
  descrizioneApp=&quot;&quot;
  provider=&quot;&quot;
  areaApplicativa=&quot;&quot;
  contestoApplicativo=&quot;&quot;
  componentiApplicativi=&quot;&quot;
  referenteApplicativo=&quot;&quot;
  emailReferenteApplicativo=&quot;&quot;
  
  record.each() { k,v -&gt;
    
    switch(k) {
      case &quot;idApplicazione&quot;:
      idApplicazione=v
      break
        case &quot;descrizione&quot;:
      descrizioneApp=v
      break
        case &quot;provider&quot;:
      provider=v
      break
        case &quot;areaApplicativa&quot;:
      areaApplicativa=v
      break
        case &quot;contestoApplicativo&quot;:
      contestoApplicativo=v
      break      
        case &quot;referenteApplicativo&quot;:
      referenteApplicativo=v
      break
        case &quot;emailReferenteApplicativo&quot;:
      emailReferenteApplicativo=v
      break
        case &quot;componentiApplicativi&quot;:
      componentiApplicativi=v
      componentiApplicativi.each { elemento -&gt;
        /*
idTecnologia.-.-.-.-.-.ORACLEDB
tipoRepository.-.-.-.-.-.SVN
ultimoTagoTrunk.-.-.-.-.-.TRUNK
pathSorgente.-.-.-.-.-.http://devmanager.sipra.it/svn/Supporto_Vendite/&lt;&lt;TTLT&gt;&gt;/oracledb
descrizione.-.-.-.-.-.Logica di business su database
dettagliTecnologici.-.-.-.-.-....
*/
        def idTecnologia=&quot;&quot;
        def tipoRepository=&quot;&quot;
        def ultimoTagoTrunk=&quot;&quot;
        def pathSorgente=&quot;&quot;
        def descrizione=&quot;&quot;
        def dettagliTecnologici=&quot;&quot;
        elemento.each() { key, value -&gt;
          switch(key) {
            case &quot;idTecnologia&quot;:
            idTecnologia=value
            break
            case &quot;tipoRepository&quot;:
            tipoRepository=value
            break
              case &quot;ultimoTagoTrunk&quot;:
            ultimoTagoTrunk=value
            break
              case &quot;pathSorgente&quot;:
            pathSorgente=value
            break
              case &quot;descrizione&quot;:
            descrizione=value
            break
              case &quot;dettagliTecnologici&quot;:
            dettagliTecnologici=value
            break
              default:
              break
              }

        }
record=idApplicazione+&quot;,&quot;+descrizioneApp+&quot;,&quot;+provider+&quot;,&quot;+areaApplicativa+&quot;,&quot;+contestoApplicativo+&quot;,&quot;+referenteApplicativo+&quot;,&quot;+emailReferenteApplicativo+&quot;,&quot;+idTecnologia+&quot;,&quot;+tipoRepository+&quot;,&quot;+ultimoTagoTrunk+&quot;,&quot;+pathSorgente+&quot;,&quot;+descrizione+&quot;,&quot;+dettagliTecnologici
       CO.append(record+&quot;\n&quot;)

      if ( CSesiste == &quot;N&quot; )
      {
        CS.write(idApplicazione+&quot;,&quot;+idTecnologia+&quot;,Abilitata\n&quot;)
        CSesiste=&quot;S&quot;
      }
      else
      {
//
// Cerca idApp+idTech e se lo trova non lo modifica altrimenti l&apos;aggiunge abilitata
//
        def esiste=&quot;N&quot;
        CS.eachLine() { 
          campi=it.split(&quot;,&quot;)
          if ( campi[0] == idApplicazione &amp;&amp; campi[1] == idTecnologia )
          {
             esiste=&quot;S&quot;
          }
        }
       if ( esiste == &quot;N&quot; )
       {
          CS.append(idApplicazione+&quot;,&quot;+idTecnologia+&quot;,Abilitata\n&quot;)
       }
     }

    listaAppId=listaAppId+&quot;,&quot;+idApplicazione+&quot; tecnologia &quot;+idTecnologia
    if ( lastListaApp != idApplicazione )
    {
       listaApp=listaApp+&quot;,&quot;+idApplicazione
       lastListaApp = idApplicazione
    }


//        println idApplicazione+&quot; - &quot;+dettagliTecnologici
    }

       break
        default:
        println k + &quot; non previsto &quot;
      break
       }
   
  }
}

CL.append(listaApp+&quot;\n&quot;)
CLI.append(listaAppId+&quot;\n&quot;)

return 0</script>
          <sandbox>false</sandbox>
        </script>
      </source>
    </hudson.plugins.groovy.SystemGroovy>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>